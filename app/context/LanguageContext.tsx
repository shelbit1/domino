'use client';

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Language = 'ru' | 'az';

type TranslationKey = 
  | 'app.title'
  | 'button.cancel' | 'button.confirm' | 'button.add' | 'button.undo' | 'button.reset' | 'button.newGame' | 'button.startGame'
  | 'setup.subtitle' | 'setup.teamCount' | 'setup.teams' | 'setup.teamNames' | 'setup.teamPlaceholder' | 'setup.emptyHint' | 'setup.rules' | 'setup.rulesPoint1' | 'setup.rulesPoint2' | 'setup.rulesPoint3' | 'setup.rulesPoint4'
  | 'game.winner' | 'game.finalScore' | 'game.points' | 'game.fixedPoints' | 'game.customPoints' | 'game.pointsPlaceholder' | 'game.lastActions' | 'game.latest' | 'game.additional'
  | 'confirm.gameEnd' | 'confirm.winDescription' | 'confirm.currentScore' | 'confirm.finalScore' | 'confirm.warning' | 'confirm.warningText';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: TranslationKey) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// –°–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const translations: Record<Language, Record<TranslationKey, string>> = {
  ru: {
    // –û–±—â–∏–µ
    'app.title': 'üéØ –î–æ–º–∏–Ω–æ',
    'button.cancel': '–û—Ç–º–µ–Ω–∞',
    'button.confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
    'button.add': '–î–æ–±–∞–≤–∏—Ç—å',
    'button.undo': '‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å',
    'button.reset': 'üîÑ –°–±—Ä–æ—Å',
    'button.newGame': '–ù–æ–≤–∞—è –∏–≥—Ä–∞',
    'button.startGame': '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã
    'setup.subtitle': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã',
    'setup.teamCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥',
    'setup.teams': '–∫–æ–º–∞–Ω–¥—ã',
    'setup.teamNames': '–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
    'setup.teamPlaceholder': '–ö–æ–º–∞–Ω–¥–∞',
    'setup.emptyHint': '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
    'setup.rules': 'üìù –ü—Ä–∞–≤–∏–ª–∞:',
    'setup.rulesPoint1': '‚Ä¢ –û—á–∫–∏: +5, +10, +15, +20, +25, +30, +35',
    'setup.rulesPoint2': '‚Ä¢ –ü—Ä–∏ +35 –∫–æ–º–∞–Ω–¥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç',
    'setup.rulesPoint3': '‚Ä¢ –î–æ–ø. –æ—á–∫–∏ –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 5',
    'setup.rulesPoint4': '‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è',

    // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    'game.winner': '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å!',
    'game.finalScore': '–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç:',
    'game.points': '–æ—á–∫–æ–≤',
    'game.fixedPoints': '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—á–∫–∏:',
    'game.customPoints': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏:',
    'game.pointsPlaceholder': '–û—á–∫–∏...',
    'game.lastActions': 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:',
    'game.latest': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ:',
    'game.additional': '(–¥–æ–ø.)',

    // –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    'confirm.gameEnd': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã',
    'confirm.winDescription': '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç +35 –æ—á–∫–æ–≤ –∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç!',
    'confirm.currentScore': '–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:',
    'confirm.finalScore': '–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç:',
    'confirm.warning': '–í–Ω–∏–º–∞–Ω–∏–µ!',
    'confirm.warningText': '–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.',
  },
  az: {
    // –û–±—â–∏–µ
    'app.title': 'üéØ Domino',
    'button.cancel': 'L…ôƒüv et',
    'button.confirm': 'T…ôsdiq et',
    'button.add': '∆èlav…ô et',
    'button.undo': '‚Ü∂ Geri al',
    'button.reset': 'üîÑ Yenid…ôn',
    'button.newGame': 'Yeni oyun',
    'button.startGame': 'Oyunu ba≈ülat',

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã
    'setup.subtitle': 'Oyuna ba≈ülamaq √º√ß√ºn komanda sayƒ±nƒ± se√ßin',
    'setup.teamCount': 'Komanda sayƒ±',
    'setup.teams': 'komanda',
    'setup.teamNames': 'Komanda adlarƒ± (m…ôcburi deyil)',
    'setup.teamPlaceholder': 'Komanda',
    'setup.emptyHint': 'Standart adlar √º√ß√ºn bo≈ü buraxƒ±n',
    'setup.rules': 'üìù Qaydalar:',
    'setup.rulesPoint1': '‚Ä¢ Xallar: +5, +10, +15, +20, +25, +30, +35',
    'setup.rulesPoint2': '‚Ä¢ +35-d…ô komanda qazanƒ±r',
    'setup.rulesPoint3': '‚Ä¢ ∆èlav…ô xallar 5-…ô q…ôd…ôr yuvarlaqla≈üƒ±r',
    'setup.rulesPoint4': '‚Ä¢ ∆èm…ôliyyatlarƒ± l…ôƒüv etm…ôk m√ºmk√ºnd√ºr',

    // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    'game.winner': 'Qalib!',
    'game.finalScore': 'Son n…ôtic…ô:',
    'game.points': 'xal',
    'game.fixedPoints': 'Sabit xallar:',
    'game.customPoints': '∆èlav…ô xallar:',
    'game.pointsPlaceholder': 'Xallar...',
    'game.lastActions': 'üìã Son …ôm…ôliyyatlar:',
    'game.latest': 'Sonuncu:',
    'game.additional': '(…ôlav…ô)',

    // –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    'confirm.gameEnd': 'Oyunun bitm…ôsi',
    'confirm.winDescription': 'Komanda +35 xal alƒ±r v…ô qazanƒ±r!',
    'confirm.currentScore': 'Cari n…ôtic…ô:',
    'confirm.finalScore': 'Son n…ôtic…ô:',
    'confirm.warning': 'Diqq…ôt!',
    'confirm.warningText': 'T…ôsdiqd…ôn sonra oyun bit…ôc…ôk v…ô bu komanda qalib olacaq.',
  },
};

interface LanguageProviderProps {
  children: ReactNode;
}

export function LanguageProvider({ children }: LanguageProviderProps) {
  const [language, setLanguageState] = useState<Language>('ru');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const savedLanguage = localStorage.getItem('domino-language') as Language;
    if (savedLanguage && ['ru', 'az'].includes(savedLanguage)) {
      setLanguageState(savedLanguage);
    }
  }, []);

  const setLanguage = (lang: Language) => {
    setLanguageState(lang);
    localStorage.setItem('domino-language', lang);
  };

  const t = (key: TranslationKey): string => {
    return translations[language][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
} 